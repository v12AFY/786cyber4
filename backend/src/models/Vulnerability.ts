import mongoose, { Document, Schema } from 'mongoose';

export interface IVulnerability extends Document {
  cveId: string;
  title: string;
  description: string;
  severity: 'Low' | 'Medium' | 'High' | 'Critical';
  cvssScore: number;
  affectedAssets: string[];
  category: string;
  publishedDate: Date;
  discoveredDate: Date;
  status: 'Open' | 'In Progress' | 'Resolved' | 'Accepted Risk';
  exploitAvailable: boolean;
  solution: string;
  references: string[];
  tags: string[];
  assignedTo?: string;
  dueDate?: Date;
  createdAt: Date;
  updatedAt: Date;
}

const VulnerabilitySchema = new Schema<IVulnerability>({
  cveId: { type: String, required: true, unique: true, index: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  severity: { 
    type: String, 
    required: true,
    enum: ['Low', 'Medium', 'High', 'Critical']
  },
  cvssScore: { type: Number, required: true, min: 0, max: 10 },
  affectedAssets: [{ type: Schema.Types.ObjectId, ref: 'Asset' }],
  category: { type: String, required: true },
  publishedDate: { type: Date, required: true },
  discoveredDate: { type: Date, default: Date.now },
  status: { 
    type: String, 
    required: true,
    enum: ['Open', 'In Progress', 'Resolved', 'Accepted Risk'],
    default: 'Open'
  },
  exploitAvailable: { type: Boolean, default: false },
  solution: { type: String, required: true },
  references: [String],
  tags: [String],
  assignedTo: { type: Schema.Types.ObjectId, ref: 'User' },
  dueDate: Date
}, {
  timestamps: true
});

VulnerabilitySchema.index({ severity: 1, status: 1 });
VulnerabilitySchema.index({ affectedAssets: 1 });

export const Vulnerability = mongoose.model<IVulnerability>('Vulnerability', VulnerabilitySchema);